drop table if exists phase;
create table phase (
    phase_id SERIAL PRIMARY KEY,
    phase_name varchar(255) NOT NULL,
    unique (phase_name)
);

drop table if exists study_type;
create table study_type (
    study_type_id SERIAL PRIMARY KEY,
    study_type_name varchar(255) NOT NULL,
    unique (study_type_name)
);

drop table if exists status;
create table status (
    status_id SERIAL PRIMARY KEY,
    status_name varchar(255) NOT NULL,
    unique (status_name)
);

drop table if exists study;
create table study (
    study_id SERIAL PRIMARY KEY,
    study_type_id INT NOT NULL,
    phase_id INT NOT NULL,
    overall_status_id INT NOT NULL,
    last_known_status_id INT NOT NULL,
    nct_id varchar(255) NOT NULL,
    brief_title text,
    official_title text,
    org_study_id text,
    acronym text,
    source text,
    rank text,
    brief_summary text,
    detailed_description text,
    why_stopped text,
    has_expanded_access text,
    target_duration text,
    biospec_retention text,
    biospec_description text,
    keywords text,
    enrollment int,
    start_date date,
    completion_date date,
    all_text text,
    record_last_updated timestamp DEFAULT CURRENT_TIMESTAMP,
    unique (nct_id),
    foreign key (phase_id) references phase (phase_id) on delete cascade,
    foreign key (study_type_id) references study_type (study_type_id) on delete cascade,
    foreign key (overall_status_id) references status (status_id) on delete cascade,
    foreign key (last_known_status_id) references status (status_id) on delete cascade
);

CREATE INDEX study_text ON study USING GIN (to_tsvector('english', all_text));
create index study_type_id on study (study_type_id);
create index phase_id on study (phase_id);
create index overall_status_id on study (overall_status_id);
create index last_known_status_id on study (last_known_status_id);
create index nct_id on study (nct_id);

drop table if exists condition;
create table condition (
    condition_id SERIAL PRIMARY KEY,
    condition_name varchar(255) NOT NULL,
    unique (condition_name)
);

CREATE INDEX condition_name ON condition USING GIN (to_tsvector('english', condition_name));

drop table if exists study_to_condition;
create table study_to_condition (
    study_to_condition_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    condition_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (condition_id) references condition (condition_id) on delete cascade
);

drop table if exists study_doc;
create table study_doc (
    study_doc_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    doc_id varchar(255),
    doc_type varchar(255),
    doc_url text,
    doc_comment text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists intervention;
create table intervention (
    intervention_id SERIAL PRIMARY KEY,
    intervention_name varchar(255) NOT NULL,
    unique (intervention_name)
);

drop table if exists study_to_intervention;
create table study_to_intervention (
    study_to_intervention_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    intervention_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (intervention_id) references intervention (intervention_id) on delete cascade
);

drop table if exists sponsor;
create table sponsor (
    sponsor_id SERIAL PRIMARY KEY,
    sponsor_name varchar(255) NOT NULL,
    unique (sponsor_name)
);

CREATE INDEX sponsor_name ON sponsor USING GIN (to_tsvector('english', sponsor_name));

drop table if exists study_to_sponsor;
create table study_to_sponsor (
    study_to_sponsor_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    sponsor_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (sponsor_id) references sponsor (sponsor_id) on delete cascade
);

drop table if exists study_outcome;
create table study_outcome (
    study_outcome_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    outcome_type varchar(255) NOT NULL,
    measure text NOT NULL,
    time_frame text,
    description text,
    foreign key (study_id) references study (study_id) on delete cascade
);
