drop table if exists phase;
create table phase (
    phase_id SERIAL PRIMARY KEY,
    phase_name varchar(255) NOT NULL,
    unique (phase_name)
);

drop table if exists study_type;
create table study_type (
    study_type_id SERIAL PRIMARY KEY,
    study_type_name varchar(255) NOT NULL,
    unique (study_type_name)
);

drop table if exists status;
create table status (
    status_id SERIAL PRIMARY KEY,
    status_name varchar(255) NOT NULL,
    unique (status_name)
);

drop table if exists study;
create table study (
    study_id SERIAL PRIMARY KEY,
    study_type_id INT NOT NULL,
    phase_id INT NOT NULL,
    overall_status_id INT NOT NULL,
    last_known_status_id INT NOT NULL,
    nct_id varchar(255) NOT NULL,
    brief_title text,
    official_title text,
    org_study_id text,
    acronym text,
    source text,
    rank text,
    brief_summary text,
    detailed_description text,
    why_stopped text,
    has_expanded_access text,
    target_duration text,
    biospec_retention text,
    biospec_description text,
    keywords text,
    enrollment int,
    start_date date,
    completion_date date,
    study_first_posted date,
    last_update_posted date,
    fulltext_load text,
    fulltext tsvector,
    record_last_updated timestamp DEFAULT CURRENT_TIMESTAMP,
    unique (nct_id),
    foreign key (phase_id) references phase (phase_id) on delete cascade,
    foreign key (study_type_id) references study_type (study_type_id) on delete cascade,
    foreign key (overall_status_id) references status (status_id) on delete cascade,
    foreign key (last_known_status_id) references status (status_id) on delete cascade
);

CREATE INDEX study_text ON study USING GIN (fulltext);
create index study_type_id on study (study_type_id);
create index phase_id on study (phase_id);
create index overall_status_id on study (overall_status_id);
create index last_known_status_id on study (last_known_status_id);
create index nct_id on study (nct_id);

drop table if exists condition;
create table condition (
    condition_id SERIAL PRIMARY KEY,
    condition_name varchar(255) NOT NULL,
    unique (condition_name)
);

drop table if exists study_to_condition;
create table study_to_condition (
    study_to_condition_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    condition_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (condition_id) references condition (condition_id) on delete cascade
);

drop table if exists study_arm_group;
create table study_arm_group (
    study_arm_group_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    arm_group_label varchar(255) NOT NULL,
    arm_group_type text,
    description text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists study_design;
create table study_design (
    study_design_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    allocation text,
    intervention_model text,
    intervention_model_description text,
    primary_purpose text,
    observational_model text,
    time_perspective text,
    masking text,
    masking_description text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists study_doc;
create table study_doc (
    study_doc_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    doc_id varchar(255),
    doc_type varchar(255),
    doc_url text,
    doc_comment text,
    foreign key (study_id) references study (study_id) on delete cascade
);

create table study_url (
    study_url_id SERIAL PRIMARY KEY,
    study_id integer NOT NULL,
    url text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists intervention;
create table intervention (
    intervention_id SERIAL PRIMARY KEY,
    intervention_name varchar(255) NOT NULL,
    unique (intervention_name)
);

drop table if exists study_location;
create table study_location (
    study_location_id SERIAL PRIMARY KEY,
    study_id integer NOT NULL,
    facility_name varchar(255),
    status text,
    contact_name text,
    investigator_name text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists study_eligibility;
create table study_eligibility (
    study_eligibility_id SERIAL PRIMARY KEY,
    study_id integer NOT NULL,
    study_pop text,
    sampling_method text,
    criteria text,
    gender text,
    gender_based text,
    gender_description text,
    minimum_age text,
    maximum_age text,
    healthy_volunteers text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists study_to_intervention;
create table study_to_intervention (
    study_to_intervention_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    intervention_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (intervention_id) references intervention (intervention_id) on delete cascade
);

drop table if exists sponsor;
create table sponsor (
    sponsor_id SERIAL PRIMARY KEY,
    sponsor_name varchar(255) NOT NULL,
    unique (sponsor_name)
);

drop table if exists study_to_sponsor;
create table study_to_sponsor (
    study_to_sponsor_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    sponsor_id INT NOT NULL,
    foreign key (study_id) references study (study_id) on delete cascade,
    foreign key (sponsor_id) references sponsor (sponsor_id) on delete cascade
);

drop table if exists study_eligibility;
create table study_eligibility (
    study_eligibility_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    study_pop text,
    sampling_method text,
    criteria text,
    gender text,
    gender_based text,
    gender_description text,
    minimum_age text,
    maximum_age text,
    healthy_volunteers text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists study_outcome;
create table study_outcome (
    study_outcome_id SERIAL PRIMARY KEY,
    study_id INT NOT NULL,
    outcome_type varchar(255) NOT NULL,
    measure text NOT NULL,
    time_frame text,
    description text,
    foreign key (study_id) references study (study_id) on delete cascade
);

drop table if exists web_user;
create table web_user (
    web_user_id SERIAL PRIMARY KEY,
    email varchar(255) NOT NULL,
    name varchar(255) NOT NULL DEFAULT '',
    picture varchar(255) NOT NULL DEFAULT '',
    unique (email)
);

drop table if exists saved_search;
create table saved_search (
    saved_search_id SERIAL PRIMARY KEY,
    web_user_id INT NOT NULL,
    search_name varchar(255) NOT NULL,
    full_text text NOT NULL DEFAULT '',
    full_text_bool INT NOT NULL DEFAULT 0,
    conditions text NOT NULL DEFAULT '',
    conditions_bool INT NOT NULL DEFAULT 0,
    sponsors text NOT NULL DEFAULT '',
    sponsors_bool INT NOT NULL DEFAULT 0,
    interventions text NOT NULL DEFAULT '',
    interventions_bool INT NOT NULL DEFAULT 0,
    phase_ids text NOT NULL DEFAULT '',
    study_type_ids text NOT NULL DEFAULT '',
    enrollment INT NOT NULL DEFAULT 0,
    email_to varchar(255) NOT NULL DEFAULT '',
    foreign key (web_user_id) references web_user (web_user_id) on delete cascade
);

drop table if exists dataload;
create table dataload (
    dataload_id SERIAL PRIMARY KEY,
    updated_on date,
    unique (updated_on)
);

CREATE INDEX sponsor_name ON sponsor USING GIN (to_tsvector('english', sponsor_name));
CREATE INDEX condition_name ON condition USING GIN (to_tsvector('english', condition_name));

CREATE TRIGGER tsvec_fulltext
BEFORE INSERT OR UPDATE ON study
FOR EACH ROW EXECUTE PROCEDURE
tsvector_update_trigger(fulltext, 'pg_catalog.english', fulltext_load);
